#!/bin/bash

minrun=$1 ; 
maxrun=$2 ;
srcprefix=$3 ;
skip=$4 ;

_usage()
{

	# ./survivalstat 1 10 experiments/onsga2r/zdt4/all_survival- 5	
	printf "Usage: ./survivalstat [minrun] [maxrun] [src-file-prefix] [boxplot-skip]\n";
	exit 0;
}

if [[ -z $minrun ]] || [[ -z $maxrun ]] || [[ -z $srcprefix ]] || [[ -z $skip ]]; then
	echo "error: some of the parameters are missing," ;
	echo "or you have unknown parameters, hence exiting ...";
	_usage ;
fi

last=`echo $srcprefix | awk -F"/" '{print $NF}'` ;
path=${srcprefix%$last};
outfile="$path"survival-box.out ;

# echo minrun: $minrun ;
# echo maxrun: $maxrun ;
# echo srcprefix: $srcprefix ;
# echo last: $last ;
# echo path: $path ;

# functions to calculate the boxplot data
_min()
{
	arr=($@);
	echo "${arr[0]}";
}
_q1()
{
	arr=($@);
	len=${#arr[@]};
	ind=`echo "0.25 * $len" | bc -l | xargs printf "%1.0f"`
	echo "${arr[$((ind-1))]}"
}
_median()
{
	arr=($@);
	len=${#arr[@]};
	if [[ ! $((len % 2)) -eq 0 ]]; then
		echo "${arr[$((len / 2))]}";
	else
		echo "(${arr[$(((len / 2)-1))]} + ${arr[$((len / 2))]})/2.0" | bc -l;
	fi
}
_q3()
{
	arr=($@);
	len=${#arr[@]};
	ind=`echo "0.75 * $len" | bc -l | xargs printf "%1.0f"`
	echo "${arr[$((ind-1))]}"
}
_max()
{
	arr=($@);
	len=${#arr[@]};
	echo "${arr[$((len-1))]}"
}
_mean()
{
	arr=($@);
	ret=`printf -- '%s\n' "${arr[@]}" | awk '{total += $1; count++} END {print total/count}'`;
	echo $ret;
}

uid=$RANDOM ;
for (( r=$minrun; r<=$maxrun; r++ ))
do
	line=`cat "$srcprefix$r".out | grep "ratio" | awk -F"=" '{print $3}'` ;
	read -a arr <<<$line ;
	if [ "$r" -eq 1 ]; then
		printf "%s\n" "${arr[@]}" > /tmp/temp-"$uid".out ;
	else
		temp=`cat /tmp/temp-"$uid".out` ;
		paste -d' ' <(printf "%s\n" "${arr[@]}") <(printf "%s\n" "$temp") > /tmp/temp-"$uid".out ;
	fi
done

nentry=`cat /tmp/temp-"$uid".out | wc -l`;
echo no of lines: $nentry ;

i=2;
maxmean=0.0 ;
maxgen=$i ;
while read line
do
	arr=();
	read -a arr <<<$line ;
	sorted=($(printf '%s\n' "${arr[@]}" | sort -g)) ;
	min=`_min ${sorted[@]}` ;
	q1=`_q1 ${sorted[@]}` ;
	median=`_median ${sorted[@]}` ;
	q3=`_q3 ${sorted[@]}` ;
	max=`_max ${sorted[@]}` ;
	mean=`_mean ${sorted[@]}` ;
	printf "%d\t%f\t%f\t%f\t%f\t%f\t%f\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" ;
	if [ "$i" -eq 2 ]; then
		printf "%d\t%f\t%f\t%f\t%f\t%f\t%f\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" > $outfile ;
	else
		printf "%d\t%f\t%f\t%f\t%f\t%f\t%f\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" >> $outfile ;
	fi

	# echo $i: $maxgen, $mean, $maxmean ;
	if [ "$i" -eq 5 ]; then
		maxmean=$mean ;
		maxgen=$i ;
	elif [ "$i" -gt 5 ]; then
		ret=`echo "$mean > $maxmean" | bc -l` ;
		if [ "$ret" -eq 1 ]; then
			maxmean=$mean ;
			maxgen=$i ;
		fi
	fi
	# echo $i: ${arr[@]} ;
	i=$((i+1));
done </tmp/temp-"$uid".out
rm -f /tmp/temp-"$uid".out ;

echo maxgen: $maxgen maxmean: $maxmean ;

uid=$RANDOM ;
cp $outfile /tmp/temp-"$uid".out ;
tempbox=/tmp/tempbox-"$uid".out ;
i=0;
while read line
do
	if [ "$i" -eq 0 ]; then
		echo $line > $tempbox ;
	else
		rem=`echo "$i % $skip" | bc` ;
		if [ "$rem" -eq 0 ]; then
			echo $line >> $tempbox ;
		fi
	fi
	i=$((i+1));
done </tmp/temp-"$uid".out

# box plot, it's noisy
gnuplot <<- EOF
	set term push
	set term pdf enhanced color
	set boxwidth 0.5 relative
	set output "${path}/survival-box.pdf"
	plot "$tempbox" using 1:3:2:6:5 with candlesticks lt 3 lw 2 title 'Quartiles' whiskerbars 0.5, \
	''                 using 1:4:4:4:4 with candlesticks lt -1 lw 2 title 'Median', \
	''                 using 1:7:7:7:7 with candlesticks lt 4 lw 2 title 'Mean'
	set term pop
EOF

# mean plot
gnuplot <<- EOF
	set term push
	set term pdf enhanced color
	set output "${path}/survival-mean.pdf"
	set arrow from $maxgen,0 to $maxgen,$maxmean nohead
	set arrow from 0,$maxmean to $maxgen,$maxmean nohead
	set label 1 '($maxgen, $maxmean)' at $maxgen,$maxmean
	# set xtics add ($maxgen $maxgen)
	# set ytics add ($maxmean, $maxmean)
	# set format y "%1.2f"
	plot "$outfile" using 1:7 with lines title 'mean'
	set term pop
EOF

rm -f $tempbox ;
rm -f /tmp/temp-"$uid".out ;
