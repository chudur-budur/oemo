<?xml version="1.0" encoding="UTF-8"?>
<!-- =============================================
     Author:   Khaled
     ============================================= -->


<!--<project name="omoead" default="compile" basedir=".">-->
<project name="omoead" basedir=".">

	<!-- bootclasspath -->
	<property name="java.boot.classpath" value="${env.CLASSPATH}"/>
	<!-- Source path -->
	<property name="src.dir" value="src"/>
	<!-- Bin path -->
	<property name="bin.dir" value="bin"/>
	<!-- External libraries path -->
	<property name="ext.jar.dir" value="libs"/>
	<!-- prebuilt jmetal jars, not required if using the original source -->
	<patternset id="jmetal.jars">
		<include name="jmetal-core-5.2-SNAPSHOT-jar-with-dependencies.jar"/>
		<include name="jmetal-algorithm-5.2-SNAPSHOT-jar-with-dependencies.jar"/>
		<include name="jmetal-problem-5.2-SNAPSHOT-jar-with-dependencies.jar"/>
		<include name="jmetal-exec-5.2-SNAPSHOT-jar-with-dependencies.jar"/>
	</patternset>
	<!-- use this if you have to modify the original jmetal codes -->
	<property name="jmetal.root" value="../../jMetal"/>
	<patternset id="jmetal.classes">
		<include name="jmetal-core/target/classes"/> 
		<include name="jmetal-algorithm/target/classes"/> 
		<include name="jmetal-problem/target/classes"/> 
		<include name="jmetal-exec/target/classes"/>
	</patternset>
	<!-- adding the external libraries into the classpath, 
	     this is needed if you are using the original source -->
	<patternset id="ext.jars">
		<include name="commons-io-2.5.jar"/>
	</patternset>
	<path id="ext.libs">
		<!-- if you are using the precompiled jars -->
		<fileset dir="${ext.jar.dir}">
			<patternset refid="jmetal.jars"/>
		</fileset>
		<!-- if you are modifying the original jmetal codes -->
		<!--<dirset dir="${jmetal.root}">
			<patternset refid="jmetal.classes"/>
		</dirset>
		<fileset dir="${ext.jar.dir}">
			<patternset refid="ext.jars"/>
		</fileset>-->
	</path>

	<!-- ================ The description line ============== -->	
	<description>
		OMOEAD: CHIM+ bounds injection based MOEAD algorithm. 
	</description>

	<!-- ==================== Clean Target ================== -->
	<!--
	  The "clean" target deletes any previous contents in the "bin" 
	  directory, and/or the .class files, also deletes the vim 
	  vestiges like .swp etc.
	-->
	<target name="clean" description="delete all the vestiges">
		<delete verbose="true" failonerror="true" includeemptydirs="true">
			<fileset dir="." defaultexcludes="no">
				<include name="*.jar"/>
				<include name="VAR*"/>
				<include name="FUN*"/>
				<include name="*.tsv"/>
				<include name="*.out"/>
				<include name="*.log"/>
			</fileset>
			<fileset dir="${src.dir}" defaultexcludes="no">
				<include name="**/*.class, **/.*.*.swp, **/*.*~"/>
			</fileset>
			<fileset dir="${bin.dir}" defaultexcludes="no"> 
				<include name="**/*"/>
				<exclude name=".dummy"/>
			</fileset>
		</delete>
	</target>
	
	<!-- ==================== Compile Model ================ -->
	<!--
	  The "make" target compiles the java files.	  
	-->
	<target name="make" depends="clean" description="compile model sources">
		<javac	classpathref="ext.libs"
			srcdir="${src.dir}"
			destdir="${bin.dir}"
			includeantruntime="false"
			debug="true"
			optimize="true">
			<!--<compilerarg line="-Xbootclasspath:/opt/jdk1.8.0_40/jre/lib/rt.jar -target 1.8 -source 1.6 -Xlint:deprecation" />-->
			<!--bootclasspath="${java.boot.classpath}">-->
			<!--deprecation="false"-->
		</javac>
	</target>

	<!-- ================= Runs the compiled code ================= -->
	<!-- This runs the compiled code -->
	<target name="run" depends="make" description="runs the model">
		<java	classpathref="ext.libs"
			classname="MoeadExr"
			fork="true">
			<classpath>
				<pathelement location="${bin.dir}/"/>
				<!-- this is needed to get the resources -->
				<!-- <pathelement location="${jmetal.root}"/> -->
			</classpath>
			<arg value="dtlz7"/>
			<arg value="1234567890123"/>
			<arg value="1234567890"/>
		</java>
	</target>

	<!-- ================= Runs the EC process ================= -->
	<!-- This runs the ECJ process -->
	<target name="run-ec" depends="make" description="runs the ec module">
		<java	classpathref="jar.external"
			classname="ec.Evolve"
			fork="true">
			<classpath>
				<pathelement location="${bin.dir}"/>
				<!-- this is needed to get the txt files -->
				<pathelement location="${src.dir}"/>
			</classpath>
			<!--<arg value="-from"/> 
			  <arg value="app/ant/ant.params"/>-->
			<arg value="-p"/>
			<arg value="print-params=false"/>
			<arg value="-file"/>
			<arg value="src/optimization/desirability/es.params"/>
			<arg value="-p"/>
			<arg value="stat.file=ant.out.stat"/>
		</java>
	</target>
</project>
