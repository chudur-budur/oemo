#!/bin/bash

minrun=$1 ; 
maxrun=$2 ;
srcprefix1=$3 ;
srcprefix2=$4 ;
skip=$5 ;

_usage()
{

	# ./hvstat 1 10 experiments/nsga2r/zdt4/hv/hv-run- 
	#	experiments/onsga2r/zdt4/hv/hv-run- 5	
	printf "%s\n\t\t%s\n" "Usage: ./hvstat [minrun] [maxrun]" "[src-file-prefix-1] [src-file-prefix-2] [boxplot-skip]\n";
	exit 0;
}

if [[ -z $minrun ]] || [[ -z $maxrun ]] || [[ -z $srcprefix1 ]] || [[ -z $srcprefix2 ]] || [[ -z $skip ]]; then
	echo "error: some of the parameters are missing," ;
	echo "or you have unknown parameters, hence exiting ...";
	_usage ;
fi

last=`echo $srcprefix1 | awk -F"/" '{print $NF}'` ;
path1=${srcprefix1%$last};
outfile1="$path1"hv-box.out ;
last=`echo $srcprefix2 | awk -F"/" '{print $NF}'` ;
path2=${srcprefix2%$last};
outfile2="$path2"hv-box.out ;

echo minrun: $minrun ;
echo maxrun: $maxrun ;
echo srcprefix1: $srcprefix1 ;
echo srcprefix2: $srcprefix2 ;
echo outfile1: $outfile1 ;
echo outfile2: $outfile2 ;

# functions to calculate the boxplot data
_min()
{
	arr=($@);
	echo "${arr[0]}";
}
_q1()
{
	arr=($@);
	len=${#arr[@]};
	ind=`echo "0.25 * $len" | bc -l | xargs printf "%1.0f"`
	echo "${arr[$((ind-1))]}"
}
_median()
{
	arr=($@);
	echo ${arr[@]} | awk ' { arr[i++]=$1; } END { x=int((i+1)/2); if (x < (i+1)/2) print (arr[x-1]+arr[x])/2; else print arr[x-1]; }'
	# len=${#arr[@]};
	# if [[ $((len % 2)) -ne 0 ]]; then
	# 	jth=$((len / 2)) ;
	# 	echo "${arr[$((len / 2))]}";
	# else
	# 	ith=$((len / 2)) ;
	# 	i_1th=$((ith-1));
	# 	echo "(${arr[ith_1]} + ${arr[ith]})/2.0" | bc -l;
	# fi
}
_q3()
{
	arr=($@);
	len=${#arr[@]};
	ind=`echo "0.75 * $len" | bc -l | xargs printf "%1.0f"`
	echo "${arr[$((ind-1))]}"
}
_max()
{
	arr=($@);
	len=${#arr[@]};
	echo "${arr[$((len-1))]}"
}
_mean()
{
	arr=($@);
	ret=`printf -- '%s\n' "${arr[@]}" | awk '{total += $1; count++} END {print total/count}'`;
	echo $ret;
}

uid=$RANDOM ;
tempfile1=/tmp/temp1-"$uid".out ;
tempfile2=/tmp/temp2-"$uid".out ;
for (( r=$minrun; r<=$maxrun; r++ ))
do
	line1=`cat "$srcprefix1$r".out | awk -F" " '{print $2}'` ;
	line2=`cat "$srcprefix2$r".out | awk -F" " '{print $2}'` ;
	read -a arr1 <<<$line1 ;
	read -a arr2 <<<$line2 ;
	if [ "$r" -eq 1 ]; then
		printf "%s\n" "${arr1[@]}" > $tempfile1 ;
		printf "%s\n" "${arr2[@]}" > $tempfile2 ;
	else
		temp1=`cat $tempfile1` ;
		temp2=`cat $tempfile2` ;
		paste -d' ' <(printf "%s\n" "${arr1[@]}") <(printf "%s\n" "$temp1") > $tempfile1 ;
		paste -d' ' <(printf "%s\n" "${arr2[@]}") <(printf "%s\n" "$temp2") > $tempfile2 ;
	fi
done

nentry1=`cat $tempfile1 | wc -l`;
nentry2=`cat $tempfile2 | wc -l`;
echo no of lines in file 1: $nentry1 ;
echo no of lines in file 2: $nentry2 ;
if [ "$nentry1" -ne "$nentry2" ]; then
	echo number of generations in two files do not match, hence exiting ...
	exit 0 ;
fi

i=1;
while read line
do
	arry=();
	read -a arry <<<$line ;
	sorted=($(printf '%s\n' "${arry[@]}" | sort -g)) ;
	# echo $i: ${sorted[@]} ;
	min=`_min ${sorted[@]}` ;
	q1=`_q1 ${sorted[@]}` ;
	median=`_median ${sorted[@]}` ;
	q3=`_q3 ${sorted[@]}` ;
	max=`_max ${sorted[@]}` ;
	mean=`_mean ${sorted[@]}` ;
	printf "%d\t%s\t%s\t%s\t%s\t%s\t%s\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" ;
	if [ "$i" -eq 1 ]; then
		printf "%d\t%s\t%s\t%s\t%s\t%s\t%s\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" > $outfile1 ;
	else
		printf "%d\t%s\t%s\t%s\t%s\t%s\t%s\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" >> $outfile1 ;
	fi
	i=$((i+1));
done <$tempfile1
rm -f $tempfile1 ;

i=1;
while read line
do
	arr=();
	read -a arr <<<$line ;
	sorted=($(printf '%s\n' "${arr[@]}" | sort -g)) ;
	min=`_min ${sorted[@]}` ;
	q1=`_q1 ${sorted[@]}` ;
	median=`_median ${sorted[@]}` ;
	q3=`_q3 ${sorted[@]}` ;
	max=`_max ${sorted[@]}` ;
	mean=`_mean ${sorted[@]}` ;
	printf "%d\t%s\t%s\t%s\t%s\t%s\t%s\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" ;
	if [ "$i" -eq 1 ]; then
		printf "%d\t%s\t%s\t%s\t%s\t%s\t%s\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" > $outfile2 ;
	else
		printf "%d\t%s\t%s\t%s\t%s\t%s\t%s\n" "$i" "$min" "$q1" "$median" "$q3" "$max" "$mean" >> $outfile2 ;
	fi
	# echo $i: ${arr[@]} ;
	i=$((i+1));
done <$tempfile2
rm -f $tempfile2 ;

uid=$RANDOM ;
cp $outfile1 /tmp/temp-"$uid".out ;
tempbox1=/tmp/tempbox1-"$uid".out ;
i=0;
while read line
do
	if [ "$i" -eq 0 ]; then
		echo $line > $tempbox1 ;
	else
		rem=`echo "$i % $skip" | bc` ;
		if [ "$rem" -eq 0 ]; then
			echo $line >> $tempbox1 ;
		fi
	fi
	i=$((i+1));
done </tmp/temp-"$uid".out

uid=$RANDOM ;
cp $outfile2 /tmp/temp-"$uid".out ;
tempbox2=/tmp/tempbox2-"$uid".out ;
i=0;
while read line
do
	if [ "$i" -eq 0 ]; then
		echo $line > $tempbox2 ;
	else
		rem=`echo "$i % $skip" | bc` ;
		if [ "$rem" -eq 0 ]; then
			echo $line >> $tempbox2 ;
		fi
	fi
	i=$((i+1));
done </tmp/temp-"$uid".out

# box plot, it's noisy
gnuplot <<- EOF
	set term push
	set term pdf enhanced color
	set boxwidth 0.5 relative
	set output "${path2}/hv-box.pdf"
	plot "$tempbox1" using 1:3:2:6:5 with candlesticks lt 3 lw 2 title 'Quartiles-nsga2' whiskerbars 0.5, \
	''                 using 1:4:4:4:4 with candlesticks lt -1 lw 2 title 'Median-nsga2', \
	''                 using 1:7:7:7:7 with candlesticks lt 4 lw 2 title 'Mean-nsga2', \
	"$tempbox2" using 1:3:2:6:5 with candlesticks lt 2 lw 2 title 'Quartiles-op-nsga2' whiskerbars 0.5, \
	''                 using 1:4:4:4:4 with candlesticks lt 8 lw 2 title 'Median-op-nsga2', \
	''                 using 1:7:7:7:7 with candlesticks lt 6 lw 2 title 'Mean-op-nsga2'
	set term pop
EOF

# mean plot
gnuplot <<- EOF
	set term push
	set term pdf enhanced color
	set output "${path2}/hv-mean.pdf"
	plot "$outfile1" using 1:7 with lines title 'nsga2', \
		"$outfile2" using 1:7 with lines title 'op-nsga2'
	set term pop
EOF

rm -rf $tempbox1 $tempbox2;
